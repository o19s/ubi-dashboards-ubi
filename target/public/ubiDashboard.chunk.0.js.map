{"version":3,"file":"ubiDashboard.chunk.0.js","sources":["/plugin:ubiDashboard/plugins\\ubi-dashboards-ubi\\public\\application.tsx","/plugin:ubiDashboard/plugins\\ubi-dashboards-ubi\\public\\components\\app.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { UbiDashboardApp } from './components/app';\nexport const renderApp = ({\n  notifications,\n  http\n}, {\n  navigation\n}, {\n  appBasePath,\n  element\n}) => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(UbiDashboardApp, {\n    basename: appBasePath,\n    notifications: notifications,\n    http: http,\n    navigation: navigation\n  }), element);\n  return () => ReactDOM.unmountComponentAtNode(element);\n};","import React, { useState } from 'react';\nimport { i18n } from '@osd/i18n';\nimport { FormattedMessage, I18nProvider } from '@osd/i18n/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { EuiButton, EuiHorizontalRule, EuiPage, EuiPageBody, EuiPageContent, EuiPageContentBody, EuiPageContentHeader, EuiPageHeader, EuiTitle, EuiText, EuiSelect } from '@elastic/eui'; // TODO: => from @opensearch-project/oui';\n\nimport { PLUGIN_ID, PLUGIN_NAME } from '../../common';\nexport const UbiDashboardApp = ({\n  basename,\n  notifications,\n  http,\n  navigation\n}) => {\n  // Use React hooks to manage state.\n  const [logs, setLogText] = useState();\n  const [size, setSize] = useState('xl');\n  const [indices, setIndices] = useState();\n\n  /**/\n  async function reactView(input) {\n    const computedData = await fetchRecordData(input);\n    return /*#__PURE__*/React.createElement(EuiText, null, /*#__PURE__*/React.createElement(\"h1\", null, /*#__PURE__*/React.createElement(EuiTextColor, {\n      color: \"success\"\n    }, /*#__PURE__*/React.createElement(EuiIcon, {\n      type: \"cheer\"\n    }), \" \", computedData.companyName)), /*#__PURE__*/React.createElement(\"div\", null, \"Location: \", computedData.location), /*#__PURE__*/React.createElement(\"p\", null, \"Total raised amount: \", computedData.raisedAmount));\n  }\n  const loadIndices = () => {\n    //alert('xx');\n    // Use the core http service to make a response to the server API.\n    //http.get('/api/ubl_dashboard/example').then((res) => {\n    http.get('/api/ubl_dashboard/ubl_logs').then(res => {\n      let log_names = [];\n      //alert(JSON.stringify(res.indices));\n\n      /**/\n      for (const idx of res.indices) {\n        log_names.push({\n          text: idx['log_name']\n        });\n      }\n      setIndices(log_names);\n\n      // Use the core notifications service to display a success message.\n      notifications.toasts.addSuccess(i18n.translate('ubiDashboard.indicesLoaded', {\n        defaultMessage: 'Indices loaded'\n      }));\n    });\n  };\n  const handleValueChange = (name, filterValue) => {\n    //  const previousValue = values[name];\n    //  updateFilterCount(name, previousValue, filterValue);\n    //  const updatedValues = { ...values };\n    //  updatedValues[name] = filterValue;\n    //  setValues(updatedValues);\n    //  applyFilterValue(name, filterValue);\n  };\n  //loadIndices();\n\n  //##################################################################\n  //on document load, hook things up here\n  document.addEventListener('DOMContentLoaded', function () {\n    alert('klajshflk');\n  });\n  //##################################################################\n\n  const onClickHandler = () => {\n    // Use the core http service to make a response to the server API.\n    //http.get('/api/ubl_dashboard/example').then((res) => {\n    http.get('/api/ubl_dashboard/get_log').then(res => {\n      //http.get('/api/ubl_dashboard/ubl_logs').then((res) => {\n      //setLogText(JSON.stringify(res.indices));\n      setLogText(res.logs);\n\n      // Use the core notifications service to display a success message.\n      notifications.toasts.addSuccess(i18n.translate('ubiDashboard.dataUpdated', {\n        defaultMessage: 'Data updated'\n      }));\n    });\n  };\n\n  // Render the application DOM.\n  // Note that `navigation.ui.TopNavMenu` is a stateful component exported on the `navigation` plugin's start contract.\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename\n  }, /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(navigation.ui.TopNavMenu, {\n    appName: PLUGIN_ID,\n    showSearchBar: true,\n    useDefaultBehaviors: true\n  }), /*#__PURE__*/React.createElement(EuiPage, {\n    restrictWidth: \"1000px\"\n  }, /*#__PURE__*/React.createElement(EuiPageBody, {\n    component: \"main\"\n  }, /*#__PURE__*/React.createElement(EuiPageHeader, null, /*#__PURE__*/React.createElement(EuiTitle, {\n    size: \"l\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ubiDashboard.helloWorldText\",\n    defaultMessage: \"{name}\",\n    values: {\n      name: PLUGIN_NAME\n    }\n  })))), /*#__PURE__*/React.createElement(EuiPageContent, null, /*#__PURE__*/React.createElement(EuiPageContentHeader, null, /*#__PURE__*/React.createElement(EuiTitle, null, /*#__PURE__*/React.createElement(\"h2\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ubiDashboard.congratulationsTitle\",\n    defaultMessage: \"Congratulations, you have successfully created a new OpenSearch Dashboards Plugin!\"\n  })))), /*#__PURE__*/React.createElement(EuiPageContentBody, null, /*#__PURE__*/React.createElement(EuiText, null, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ubiDashboard.content\",\n    defaultMessage: \"Look through the generated code and check out the plugin development documentation.\"\n  })), /*#__PURE__*/React.createElement(EuiHorizontalRule, null), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ubiDashboard.timestampText\",\n    defaultMessage: \"Latest logs: {time}\",\n    values: {\n      time: logs ? logs : 'Unknown'\n    }\n  })), /*#__PURE__*/React.createElement(EuiSelect, {\n    id: \"ubiDashboard.logIndices\",\n    options: indices,\n    onChange: e => setSize(String(e.target.value))\n  }), /*#__PURE__*/React.createElement(EuiButton, {\n    type: \"primary\",\n    size: \"s\",\n    onClick: onClickHandler\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ubiDashboard.buttonText\",\n    defaultMessage: \"Get data\"\n  }))))))))));\n};"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnsourceRoot":""}